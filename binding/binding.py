import os

base_dir = "../resources/scripts/partylab/"
funcs = {
    "utils": [
        # raylib
        ("getScreenWidth", "number", []),
        ("getScreenHeight", "number", []), 
        ("getDeltaTime", "number", []), 
    ],
    "core": [
        ("transitionTo", "nil", [("number", "scene")]),
        ("transitionToCB", "nil", [("number", "scene"), ("fun()", "callback")]),
        ("exit", "nil", []),
        ("getAllGameModes", "GameMode[]", []),
    ],
    "steam": [
        ("getCurrentUserID", "SteamID", []),
        ("getCurrentLobby", "GameLobby", []),
        ("getSteamUsername", "string", [("SteamID", "userId")]),
    ],
    "rendering": [
        ("loadTexture", "number", [("string", "file")]),
        ("unloadTexture", "nil", [("number", "textureHandle")]),
        ("drawTexture", "nil", [("number", "textureHandle"), ("Vector2", "pos"), ("Vector2", "size")]),
        ("drawTextureFlip", "nil", [("number", "textureHandle"), ("Vector2", "pos"), ("Vector2", "size"), ("boolean", "flipH"), ("boolean", "flipV")]),
        ("drawTextureWithTint", "nil", [("number", "textureHandle"), ("Vector2", "pos"), ("Vector2", "size"), ("Color", "tint")]),
        ("drawTextureCustom", "nil", [("number", "textureHandle"), ("Vector2", "pos"), ("Vector2", "size"), ("Vector2", "origin"), ("boolean", "flipH"), ("boolean", "flipV"), ("Color", "tint")]),
        ("getTextureSize", "Vector2", [("number", "textureHandle")]),
        ("drawRectangle", "nil", [("Vector2", "pos"), ("Vector2", "size"), ("Color", "color")]),
        ("beginScissor", "nil", [("Vector2", "pos"), ("Vector2", "size")]),
        ("endScissor", "nil", []),
        ("drawText", "nil", [("string", "text"), ("number", "fontSize"), ("Vector2", "pos"), ("Color", "color")]),
        ("measureText", "Vector2", [("string", "text"), ("number", "fontSize")]),
        ("getCenter", "Vector2", [("Vector2", "size"), ("Vector2", "totalSize")]),
        ("within", "boolean", [("Vector2", "x"), ("Vector2", "pos"), ("Vector2", "size")]),
        ("isMouseHovering", "boolean", [("Vector2", "pos"), ("Vector2", "size")]),
        ("isMouseLeftClicked", "boolean", []),
        ("isMouseRightClicked", "boolean", []),
        ("isMouseClicked", "boolean", [("number", "button")]),
        ("getMousePosition", "Vector2", []),
        ("getMouseDelta", "Vector2", []),
        ("getMouseWheel", "Vector2", []),
        ("isMouseLeftDown", "boolean", []),
        ("isMouseRightDown", "boolean", []),
        ("isMouseDown", "boolean", [("number", "button")]),
        ("rlPushMatrix", "nil", []),
        ("rlPopMatrix", "nil", []),
        ("rlRotate", "nil", [("number", "angleInDeg"), ("number", "x"), ("number", "y"), ("number", "z")]),
        ("rlTranslate", "nil", [("number", "x"), ("number", "y"), ("number", "z")]),
        ("rlScale", "nil", [("number", "x"), ("number", "y"), ("number", "z")]),
    ],
}

for key, funcs in funcs.items():
    luafile = base_dir + key + ".lua"
    with open(luafile, "w") as f:
        f.write("-- Lua generated by binding.py\n")
        f.write("local m = {}\n\n")
        
        existing = f"./{key}.lua"
        if (os.path.isfile(existing)):
            with open(existing, "r") as e:
                f.writelines(e.readlines())
                f.write("\n")

        for fn, r, args in funcs:
            for arg in args:
                f.write(f"---@param {arg[1]} {arg[0]}\n")
            f.write(f"---@return {r}\n")
            param_list = ",".join(map(lambda arg: arg[1], args))
            f.write(f"m.{fn} = function({param_list})\n")
            
            if r == "nil":
                f.write(f"\tcpp_{fn}({param_list})\n")
            else:
                f.write(f"\treturn cpp_{fn}({param_list})\n")
            f.write("end\n\n")

        f.write("\nreturn m")